"""
Utilities to load walk-forward results generated by WalkforwardEngine.

This loader understands the current engine output structure where each
per-strategy JSON file contains a top-level 'walkforward_results' list
with window-level metrics.
"""

from __future__ import annotations

import json
from pathlib import Path
from typing import List, Tuple

import pandas as pd


def pick_latest_walkforward_run(results_root: Path) -> Path | None:
    candidates = [
        p for p in results_root.iterdir()
        if p.is_dir() and p.name.startswith("walkforward_performance_analysis_")
    ]
    if not candidates:
        # Fallback: pick latest directory if no prefixed ones exist
        all_dirs = [p for p in results_root.iterdir() if p.is_dir() and p.name.lower() != "logs"]
        return max(all_dirs, key=lambda p: p.stat().st_mtime) if all_dirs else None
    return max(candidates, key=lambda p: p.stat().st_mtime)


def load_walkforward_results(run_dir: Path) -> pd.DataFrame:
    """Flatten walk-forward results into a DataFrame of window-level rows.

    Columns include strategy, data_file, and metrics from each window dict.
    """
    records: List[dict] = []
    for strat_dir in run_dir.iterdir():
        if not strat_dir.is_dir() or strat_dir.name.lower() in {"logs", "aggregated", "visualizations"}:
            continue
        for json_file in strat_dir.glob("*.json"):
            try:
                with open(json_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
            except Exception:
                continue
            wf_results = data.get("walkforward_results")
            if not isinstance(wf_results, list):
                continue
            strategy_name = strat_dir.name
            data_file = data.get("data_file") or json_file.stem
            for row in wf_results:
                row_copy = dict(row)
                row_copy["strategy_name"] = strategy_name
                row_copy["data_name"] = data_file
                records.append(row_copy)

    return pd.DataFrame(records)


__all__ = [
    "pick_latest_walkforward_run",
    "load_walkforward_results",
]


